SERVICE = "bass"

require "playerbase"

density = 90
complexity = 97
range = 50
constantBass = false
rootDownbeat = true
nonHarmonicTones = true
volume = 100

def fader1_handler(time, address, types, float_param)
    display "fader1_handler", time, address, types, float_param
    vtsched.start_use()
    if float_param != 1: density = int(100 * float_param)
    display density
    vtsched.finish_use()

def fader2_handler(time, address, types, float_param)
    display "fader2_handler", time, address, types, float_param
    vtsched.start_use()
    if float_param != 1: complexity = int(100 * float_param)
    display complexity
    vtsched.finish_use()

def fader3_handler(time, address, types, float_param)
    display "fader3_handler", time, address, types, float_param
    vtsched.start_use()
    if float_param != 1: range = int(100 * float_param)
    display range
    vtsched.finish_use()

def fader5_handler(time, address, types, float_param)
    display "fader5_handler", time, address, types, float_param
    vtsched.start_use()
    volume = int(127 * float_param)
    display volume
    vtsched.finish_use()

def toggle1_handler(time, address, types, int_param)
    display "toggle1_handler", time, address, types, int_param
    vtsched.start_use()
    constantBass = true if int_param == 1 else false
    display constantBass
    vtsched.finish_use()

def toggle2_handler(time, address, types, int_param)
    display "toggle2_handler", time, address, types, int_param
    vtsched.start_use()
    rootDownbeat = true if int_param == 1 else false
    display rootDownbeat
    vtsched.finish_use()

def toggle3_handler(time, address, types, int_param)
    display "toggle3_handler", time, address, types, int_param
    vtsched.start_use()
    rootDownbeat = true if int_param == 1 else false
    display nonHarmonicTones
    vtsched.finish_use()

def initializeServices()
    o2_osc_port_new(SERVICE, 8770, false)
    o2_method_new("/" + SERVICE + "/1/fader1", "f", 'fader1_handler', true)
    o2_method_new("/" + SERVICE + "/1/fader2", "f", 'fader2_handler', true)
    o2_method_new("/" + SERVICE + "/1/fader3", "f", 'fader3_handler', true)
    o2_method_new("/" + SERVICE + "/1/fader5", "f", 'fader5_handler', true)
    o2_method_new("/" + SERVICE + "/1/toggle1", "i", 'toggle1_handler', true)
    o2_method_new("/" + SERVICE + "/1/toggle2", "i", 'toggle2_handler', true)
    o2_method_new("/" + SERVICE + "/1/toggle3", "i", 'toggle3_handler', true)

initializeServices()

#(seq is the sequence of notes so far, ratio is array of ratios for transitioning 
# to states, density is a scale of [0, 100) to determine the amount of rest
# complexity is a scale of [0, 100) to 
# determine variation and complexity to rhythm)
def makeRatioRhythm(ratio)
    i = idiv(complexity, 20)
    j = idiv(99 - density, 20) - 1
    if j == -1: j = 0
    if constantBass
        ratio[i] = [0, 100]
        return
    if i == 0
        ratio[j] = [0, 100]
    elif i == 1
        if density < 75
            ratio[j] = [0, 100]
        else
            ratio[1] = [0, 100]
    elif i == 4
        ratio[4] = [0, 67]
        ratio[3] = [67, 100]
    else
        ratio[i] = [0, 46]
        ratio[i + 1] = [46, 73]
        ratio[i - 1] = [73, 100]

def clearRatio(ratio)
    for i = 0 to 13
        ratio[i] = [-1, 0]

def nextNoteInScale(i, dir)
    i = i + dir
    if i == -1: i = 11
    if i == 12: i = 0
    while not cur_scale[i]
        i = i + dir
        if i == -1: i = 11
        if i == 12: i = 0
    return i

#(seq is the sequence of notes so far, ratio is array of ratios for transitioning
# to states, cur_scale, cur_chord, cur_bass, density is a scale of [0, 100) to 
# determine the amount of rest, complexity is a scale of [0, 100) to
# determine variation for eaxmple not starting on root, use of non-chord tones 
# and non-harmonic tones, wider jumps, range determines pitch range on a scale of [0, 100))
def makeRatioPitch(seq, ratio, numNotesInChord)
    clearRatio(ratio)
    if density == 0
        ratio[12] = [0, 100]
        return
    if constantBass
        ratio[cur_bass] = [0, 100]
        return
    i = idiv(complexity, 20)
    prevNote = -1
    prevNote2 = -1
    nhtdp = false
    nhtcp = false
    nhtdInterval = 0
    nhtcInterval = 0
    if seq == []
        if rootDownbeat
            ratio[cur_bass] = [0, 100]
            return
        elif i < 2
            if density < 20
                restRatio = 99 - (density * 4)
            else
                restRatio = 0
        else
            restRatio = 99 - density
    else
        prevNote = seq[len(seq) - 1][0]
        if prevNote == 12: prevNote = -1
        if len(seq) > 1: prevNote2 = seq[len(seq) - 2][0]
        if prevNote2 == 12: prevNote2 = -1
        if i == 0
            restRatio = 99
        elif i == 1
            if density < 75
                restRatio = 99
            else
                restRatio = 0
        else
            restRatio = 99 - density
            if prevNote != -1 and nonHarmonicTones
                if i > 2
                    if cur_chord[prevNote] or (not cur_scale[prevNote] and 
                       not (len(seq) > 2 and (prevNote2 != -1 and 
                       cur_scale[prevNote2] and not cur_chord[prevNote2])))
                        nhtdp = true
                if i == 4 and cur_scale[prevNote]
                    nhtcp = true
    if prevNote != -1 and not cur_chord[prevNote]: restRatio = 0
    ratio[12] = [100 - restRatio, 100]
    ratioInterval = 33
    ratioInterval = int(ratioInterval * ((100 - restRatio) / 100))
    if numNotesInChord == 4
        ratioInterval = ratioInterval - 8
    if nhtdp
        ratioInterval = ratioInterval - int(ratioInterval * .27)
        nhtdInterval = int(26 * ((100 - restRatio) / 100) / 2)
    if nhtcp
        ratioInterval = ratioInterval - int(ratioInterval * .15)
        nhtcInterval = int(15 * ((100 - restRatio) / 100) / 2)
    total = restRatio + 1
    lastRatio = 0
    for i = 0 to 12
        if cur_chord[i]
            if prevNote != -1 and not cur_chord[prevNote]
                if not cur_scale[prevNote]
                    if ((abs(prevNote - i) == 1) or (abs(prevNote - i) == 11)) and 
                       prevNote2 != i
                        ratio[i][0] = 0
                        ratio[i][1] = 100
                        total = 100
                else
                    if (abs(prevNote - i) < 3) or (abs(prevNote - i) > 9)
                        ratioIntervalT  = 50
                        if (not cur_chord[nextNoteInScale(prevNote, 1)]) or 
                           (not cur_chord[nextNoteInScale(prevNote, -1)])
                            ratioIntervalT = 100
                        ratio[i][0] = lastRatio
                        ratio[i][1] = ratio[i][0] + ratioIntervalT
                        lastRatio = ratio[i][1]
                        total = total + ratioIntervalT
            else
                ratio[i][0] = lastRatio
                ratio[i][1] = ratio[i][0] + ratioInterval
                lastRatio = ratio[i][1]
                total = total + ratioInterval
        else
            if cur_scale[i]
                if nhtdp
                    if cur_chord[prevNote] and ((abs(prevNote - i) < 3) or 
                                                (abs(prevNote - i) > 9))
                        ratio[i][0] = lastRatio
                        ratio[i][1] = ratio[i][0] + nhtdInterval
                        lastRatio = ratio[i][1]
                        total = total + nhtdInterval
                    if not cur_scale[prevNote] and ((abs(prevNote - i) == 1) or 
                                                    (abs(prevNote - i) == 11))
                        if prevNote2 != i
                            ratio[i][0] = 0
                            ratio[i][1] = 100
                            total = 100
            else
                if nhtcp and ((abs(prevNote - i) == 1) or (abs(prevNote - i) == 11)) and 
                   not (prevNote2 != -1 and prevNote2 == i)
                    nhtcIntervalT = nhtcInterval
                    x = nextNoteInScale(prevNote, 1)
                    y = nextNoteInScale(prevNote, -1)
                    if not((abs(x - prevNote) == 2 or abs(x - prevNote) == 10) and 
                           (abs(y - prevNote) == 2 or abs(y - prevNote) == 10))
                        nhtcIntervalT = nhtcInterval * 2
                    ratio[i][0] = lastRatio
                    ratio[i][1] = ratio[i][0] + nhtcIntervalT
                    lastRatio = ratio[i][1]
                    total = total + nhtcIntervalT
            
    #add remaining ratios caused by decimal truncation as evenly as possible to
    #valid notes for output
    remainder = 100 - total
    i = 0
    while remainder > 0
        while ratio[i] == [-1, 0]
            i = (i + 1) % 12
        ratio[i][1] = ratio[i][1] + 1
        remainder = remainder - 1
        for j = i + 1 to 12
            if ratio[j] != [-1, 0]
                ratio[j] = [ratio[j][0] + 1, ratio[j][1] + 1]
        i = (i + 1) % 12

#(seq is the seq of rhythms so far, ratio is array of ratios for 
# transitioning to states, beatsLeft is num of beats left in the measure)
def MarkovRhythm(seq, ratio, beatsLeft)
    if beatsLeft < 0.05
        return seq
    x = int(random() * 100)
    for i = 0 to len(ratio)
        dur = 4 / (2.0 ** real(i))
        if complexity < 40
            dur = dur * (cur_beats_per_measure / 4)
        if ratio[i][0] <= x and ratio[i][1] > x and beatsLeft - dur > -0.02
            seq.append(i)
            beatsLeft = beatsLeft - dur
    MarkovRhythm(seq, ratio, beatsLeft)

#(seq is the seq of notes so far, ratio is array of ratios for 
# transitioning to states, rhythmSeq is array of rhythm seq to match the pitch)
def MarkovPitch(seq, ratio, rhythmSeq, numNotesInChord)
    print "ratio:", ratio
    x = int(random() * 100)
    appended = false
    for i = 0 to len(ratio)
        if ratio[i][0] <= x and ratio[i][1] > x and not appended
            seq.append([i, rhythmSeq[len(seq)]])
            appended = true
    if not appended: seq.append([0, rhythmSeq[len(seq)]])
    if len(seq) == len(rhythmSeq)
        return seq
    makeRatioPitch(seq, ratio, numNotesInChord)
    MarkovPitch(seq, ratio, rhythmSeq, numNotesInChord)

def play_a_measure()
    # compute a measure using these variables:
    #    cur_style - a symbol representing style to play (if
    #       this is not your style, do not play)
    #    cur_start_beat - what beat to start on if you are stopped
    #    cur_stop_beat - what beat to stop on if you have started (you can
    #       stop slightly late; generally you should not start any notes 
    #       at or after tm_stop_beat but you can play a short note on 
    #       tm_stop_beat if it is stylistically sensible.)
    #    cur_beats_per_measure - the current time signature as an integer
    #    cur_bps - current beats per second (the vtsched will implement this
    #       but reading the vtsched timemap slope is not reliable because
    #       vtsched may be updated instantaneously after this call.
    #    cur_scale - boolean array representing current scale
    #    cur_chord - boolean array representing current chord
    #    cur_bass - integer representing root of chord
    #
    display "play_a_measure", cur_beats_per_measure, cur_bps
    display "    ", cur_scale, cur_chord, cur_bass

    if cur_style == 'rock'
        random_seed(time_date()[0])
        new = []
        #each elem represents the ratio of the Markov Chain transitioning to that
        #rhythm. Index 0 is whole note, 1 is half, 2 is quarter, etc the range is 
        #lower bound exclusive upper bound inclusive.
        ratio = [[-1, 0], [-1, 0], [-1, 0], [-1, 0], [-1, 0]]
        beatsLeft = cur_beats_per_measure
        if complexity > 59 and rootDownbeat and constantBass == false
            new.append(2)
            beatsLeft = beatsLeft - 1
        makeRatioRhythm(ratio)
        rhythmSeq = MarkovRhythm(new, ratio, beatsLeft)

        #Same as ratio for rhythm, except index 0 is C, 1 is C#, etc last index 
        #is rest.
        ratio = [[-1, 0], [-1, 0], [-1, 0], [-1, 0], [-1, 0], [-1, 0], [-1, 0], 
                 [-1, 0], [-1, 0], [-1, 0], [-1, 0], [-1, 0], [-1, 0]]
        numNotesInChord = 0
        for i = 0 to 12
            if cur_chord[i]
                numNotesInChord = numNotesInChord + 1
        makeRatioPitch([], ratio, numNotesInChord)
        noteSeq = MarkovPitch([], ratio, rhythmSeq, numNotesInChord)

        print "noteSeq:", noteSeq
        for i = 0 to len(noteSeq)
            if noteSeq[i][0] != 12
                if not cur_chord[noteSeq[i][0]] and i != 0
                    if abs(noteSeq[i][0] - noteSeq[i - 1][0] % 12) > 2
                        if idiv(noteSeq[i][0], 6) == 0
                            noteSeq[i][0] = noteSeq[i][0] + 12
                        else
                            noteSeq[i][0] = noteSeq[i][0] - 12
                noteSeq[i][0] = noteSeq[i][0] + 36
        if noteSeq[0][0] == 12
            vel = 0
        else
            vel = volume
        dur = 4 / (2.0 ** real(noteSeq[0][1]))
        if complexity < 40
            dur = dur * (cur_beats_per_measure / 4)
        if complexity > 19 and complexity < 40 and density > 74
            if cur_beats_per_measure == 3
                dur = 2
            elif cur_beats_per_measure == 5
                dur = 3
        curBeat = dur
        midi_out.note(0, noteSeq[0][0], vel, curBeat - .01)
        for i = 1 to len(noteSeq)
            dur = 4 / (2.0 ** real(noteSeq[i][1]))
            if complexity < 40
                dur = dur * (cur_beats_per_measure / 4)
                if complexity > 19 and density > 74
                    if cur_beats_per_measure == 3
                        dur = 1
                    elif cur_beats_per_measure == 5
                        dur = 2
            if noteSeq[i][0] == 12
                vel = 0
            else
                vel = volume
            vtsched.cause(curBeat, midi_out, 'note', 0, noteSeq[i][0], vel,
                          dur - .01)
            curBeat = curBeat + dur
